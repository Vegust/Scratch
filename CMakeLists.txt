cmake_minimum_required(VERSION 3.25)
project(Scratch)
set(CMAKE_CXX_STANDARD 23)

add_compile_definitions(NOMINMAX)
add_compile_definitions(WIN32_LEAN_AND_MEAN)

# --------- Executable ----------
add_executable(ScratchExe)
target_sources(ScratchExe PRIVATE
		Source/main.cpp
)
# --------------------------------

# --------- Game Library ---------
file(GLOB_RECURSE SCRATCH_CORE_SOURCES "Source/Core/*.cpp")
file(GLOB_RECURSE SCRATCH_APPLICATION_SOURCES "Source/Application/*.cpp")
file(GLOB_RECURSE SCRATCH_GAME_SOURCES "Source/Game/*.cpp")
file(GLOB_RECURSE SCRATCH_ASSET_SOURCES "Source/Rendering/*.cpp")
file(GLOB_RECURSE SCRATCH_UI_SOURCES "Source/UI/*.cpp")
file(GLOB_RECURSE SCRATCH_RESOURCE_SOURCES "Source/Asset/*.cpp")

add_library(ScratchLib STATIC
		${SCRATCH_CORE_SOURCES}
		${SCRATCH_APPLICATION_SOURCES}
		${SCRATCH_GAME_SOURCES}
		${SCRATCH_ASSET_SOURCES}
		${SCRATCH_UI_SOURCES}
		${SCRATCH_RESOURCE_SOURCES}
)

target_include_directories(ScratchLib PUBLIC Source)
target_include_directories(ScratchLib PUBLIC Source/Core)

target_link_libraries(ScratchExe ScratchLib)
# --------------------------------

# ----------- Testing ------------
enable_testing()
include(CTest)
add_subdirectory(Testing)
# --------------------------------

# ---------------------- THIRD PARTY ----------------------------
# see licenses in ThirdParty sub-folders

# ------------ glfw --------------
# abstraction layer over OS API to create and manage OS window and input
# https://github.com/glfw/glfw
set(GLFW_BUILD_DOCS OFF)
set(GLFW_INSTALL OFF)
add_subdirectory(Source/ThirdParty/glfw)
include_directories(Source/ThirdParty/glfw/include)
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/glfw/include)
target_link_libraries(ScratchLib glfw)
# --------------------------------

# ------------ glad --------------
# autogenerated bindings to modern OpenGL standard
# https://github.com/Dav1dde/glad
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/glad/include)
add_library(glad STATIC Source/ThirdParty/glad/src/glad.c)
target_include_directories(glad PRIVATE Source/ThirdParty/glad/include)
target_link_libraries(ScratchLib glad)
# --------------------------------

# ------------ stb ---------------
# image loading/saving
# https://github.com/nothings/stb
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/stb)
add_library(stb STATIC Source/ThirdParty/stb/stb_image.cpp)
target_link_libraries(ScratchLib stb)
# --------------------------------

# ------------ glm ---------------
# OpenGL compatible math library
# https://github.com/g-truc/glm
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/glm)
# --------------------------------

# --------- dragonbox ------------
# string representations of float
# https://github.com/jk-jeon/dragonbox
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/dragonbox)
# --------------------------------

# --------- fast_float -----------
# float parsing
# https://github.com/fastfloat/fast_float
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/fast_float)
# --------------------------------

# --------- dear imgui -----------
# immediate mode UI
# https://github.com/ocornut/imgui
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/imgui)
add_library(imgui STATIC
		Source/ThirdParty/imgui/imgui.cpp
		Source/ThirdParty/imgui/imgui_demo.cpp
		Source/ThirdParty/imgui/imgui_draw.cpp
		Source/ThirdParty/imgui/imgui_widgets.cpp
		Source/ThirdParty/imgui/imgui_tables.cpp
		# opengl and glfw backends
		Source/ThirdParty/imgui/backends/imgui_impl_opengl3.cpp
		Source/ThirdParty/imgui/backends/imgui_impl_glfw.cpp
)
target_include_directories(imgui PRIVATE Source/ThirdParty/imgui)
target_link_libraries(ScratchLib imgui)
# --------------------------------

# ----------- assimp -------------
# model loading
# https://github.com/assimp/assimp
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(ASSIMP_INSTALL OFF CACHE BOOL "" FORCE)
set(ASSIMP_WARNINGS_AS_ERRORS OFF CACHE BOOL "" FORCE)
add_subdirectory(Source/ThirdParty/assimp EXCLUDE_FROM_ALL)
target_include_directories(ScratchLib PUBLIC Source/ThirdParty/assimp/include)
target_link_libraries(ScratchLib assimp)
# --------------------------------